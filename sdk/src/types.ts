// Central SDK shared TypeScript types

export interface HealthResult {
  message: string;
}

export interface Location {
  longitude: number;
  latitude: number;
}

export interface RouteReference {
  origin: string;
  destination: string;
  transportVehicleId: string;
}

export enum IncidentType {
  ISSUES = 'ISSUES',
  DELAY = 'DELAY',
  SEVERE_BLOCKER = 'SEVERE_BLOCKER'
}

export enum ReporterType {
  USER = 'USER',
  DISPATCHER = 'DISPATCHER',
  EXTERNAL_SYSTEM = 'EXTERNAL_SYSTEM'
}

export interface Reporter {
  id: string;
  type: ReporterType;
}

export interface IncidentReportDetails {
  reportedOnRoute: RouteReference | null;
}

// Simplified request - location, reporter, and details are inferred from user context
export interface CreateIncidentRequest {
  userId: string;
  incidentType: IncidentType;
  description?: string;
}

export interface IncidentReport {
  id: string; // Generated by the repository
  location: Location; // Inferred from user's current location
  reporter: Reporter; // Inferred from userId
  incidentType: IncidentType;
  details: IncidentReportDetails; // Inferred from user's active journey
  timestamp: Date;
  description?: string;
}

// -------------------- Journey Contract Types --------------------

export type Longitude = number;
export type Latitude = number;
export type Distance = number;
export type Duration = number;
export type Time = number;
export type ConnectionId = number;

export interface Station { name: string }
export interface Delay { time: Time }

export interface Connection {
  id: ConnectionId;
  from: Station;
  to: Station;
  incident?: Incident;
}

export interface Incident {
  connection: Connection;
}

export interface Route {
  stations: Station[];
  delay: Delay;
  incidents: Incident[];
}

export interface Journey {
  routes: Route[];
  distance: Distance;
  duration: Duration;
}

export interface Origin { station: Station }
export interface Destination { station: Station }
export interface Coordinates { longitude: Longitude; latitude: Latitude }

export interface JourneyStartState { route_index: number; position_in_route: number; updated_at: string }
export interface JourneyStartResponse { journey_id: string; state: JourneyStartState }

export interface Progress { currentRoute: number; currentStage: number; currentConnection: Connection }
export interface JourneyProgress { routes: Route[]; progress: Progress; delay: Delay; firstStation: Station; lastStation: Station }

// -------------------- ApiClient Contract --------------------

export interface ApiClient {
  getJourney(origin: Origin, destination: Destination): Promise<Journey>;
  startJourney(journey: Journey): Promise<JourneyStartResponse>;
  getJourneyStage(journeyId: string, coordinates: Coordinates): Promise<JourneyProgress>;
  healthCheck(): Promise<HealthResult>;
}
