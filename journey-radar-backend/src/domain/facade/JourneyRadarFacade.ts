import { JourneyRadarCapabilities } from './JourneyRadarCapabilities';
import { IncidentReport } from '../model/IncidentReport';
import { IncidentReportRepository } from '../repository/IncidentReportRepository';
import { UserContextService } from '../service/UserContextService';

export class JourneyRadarFacade implements JourneyRadarCapabilities {
  constructor(
    private readonly incidentReportRepository: IncidentReportRepository,
    private readonly userContextService: UserContextService
  ) {}

  async planJourney(params: { origin: string; destination: string }): Promise<any> {
    console.log(`Domain: Planning journey from ${params.origin} to ${params.destination}...`);
    return { id: 'journey_123', status: 'PLANNED', from: params.origin, to: params.destination };
  }

  async getJourneyById(id: string): Promise<any> {
    console.log(`Domain: Getting journey by id ${id}...`);
    return { id, details: 'Journey details here' };
  }

  async checkHealth(): Promise<{ status: string; domain: string }> {
    return { status: 'OK', domain: 'JourneyRadar' };
  }

  async reportIncident(userId: string, incidentType: string, description?: string): Promise<IncidentReport> {
    console.log(`Domain: User ${userId} reporting incident of type ${incidentType}`);

    // Get user context from the service
    const location = await this.userContextService.getCurrentLocation(userId);
    const reporter = await this.userContextService.getReporter(userId);
    const activeJourney = await this.userContextService.getActiveJourney(userId);

    console.log(`Domain: Inferred location (${location.latitude}, ${location.longitude}) for user ${userId}`);
    if (activeJourney) {
      console.log(`Domain: User is on journey from ${activeJourney.origin} to ${activeJourney.destination}`);
    }

    // Create incident report with inferred context
    const incidentReport = new IncidentReport(
      '', // ID will be generated by repository
      location,
      reporter,
      incidentType as any, // Type will be validated in the route
      { reportedOnRoute: activeJourney },
      new Date(),
      description
    );

    // Save the incident report to the repository
    const savedIncident = await this.incidentReportRepository.save(incidentReport);

    console.log(`Domain: Incident ${savedIncident.id} reported successfully by ${savedIncident.reporter.type}`);
    return savedIncident;
  }
}
